<!--
 This XML file is the "command center" of your compiler.
 Here, we define the structure of the abstract syntax tree as well as the 
 traversals to process it.
-->

<?xml-stylesheet href="ast.html.xsl" type="text/xsl" name="HTML" media="screen"?>
<definition version="0.9" >

<!--
  =========================================================================
-->

  <attributetypes>
    <type name="String" ctype="char*" init="NULL" copy="function" />
    <type name="Int" ctype="int" init="0" copy="literal" />
    <type name="Bool" ctype="bool" init="FALSE" copy="literal" />
    <type name="Float" ctype="float" init="0.0" copy="literal" />
    <type name="BinOp" ctype="binop" init="BO_unknown" copy="literal" />
    <type name="UnOp" ctype="unop" init="UO_unknown" copy="literal" />
    <type name="Type" ctype="type" init="TY_unknown" copy="literal" />
    <type name="Link" ctype="node*" init="NULL" copy="lookup" />
    <type name="Void" ctype="void*" init="NULL" copy="lookup" /> <!-- Not sure this is how we want it, but for now it works. -->
    <type name="CompilerPhase" ctype="compiler_phase_t" init="PH_initial" copy="literal" />
  </attributetypes>

<!--
  =========================================================================
-->

  <phases>
    <!-- id is the short id of the traversal 
         name is a descriptive name
         default gives the default traversal mode
           user  a user defined function
           sons  TravSons
           none  TravNone
           error TravError
         include the include file needed for the traversal
    -->
    <general>
      <traversal id="PRT" name="Print Syntax Tree" default="user" include="print.h" />
      <traversal id="COPY" name="Copy Syntax Tree" default="user" include="copy_node.h" />
      <traversal id="FREE" name="Free Syntax Tree" default="user" include="free_node.h" />
      <traversal id="CHK" name="Check Syntax Tree" default="user" include="check.h" />

      <traversal id="RI" name="Rename identifiers" default="sons" include="rename_identifiers.h">
        <travuser>
          <node name="Id" />
          <node name="VarDeclare" />
        </travuser>
      </traversal>

      <traversal id="SI" name="Sum ins" default="sons" include="sum_ints.h">
        <travuser>
          <node name="Num" />
        </travuser>
      </traversal>

      <traversal id="OS" name="Optimise subtraction" default="sons" include="opt_sub.h">
        <travuser>
          <node name="BinOp" />
        </travuser>
      </traversal>

    </general>
  </phases>

<!--
  =========================================================================
-->

  <nodesets>
     <nodeset name="Declaration">
      <target>
        <node name="FunDec"/>
        <node name="FunDef"/>
        <node name="GlobalDec"/>
        <node name="GlobalDef"/>
      </target>
    </nodeset>
    
    <nodeset name="RetType">
  	  <target>
  	    <node name="Void"/>
  	    <node name="BasicType"/>
  	  </target>
  	</nodeset>
  	
  	<nodeset name="Type">
  	  <target>
  	    <node name="BasicType"/>
  	  </target>
  	</nodeset>
  	
  	<nodeset name="BasicType">
  	  <target>
  	    <node name="Bool"/>
  	    <node name="Int"/>
  	    <node name="Float"/>
  	  </target>
  	</nodeset>
  	
  	<nodeset name="Statement">
      <target>
        <node name="VarDeclare" />
        <node name="Assign" />
        <node name="Funcall"/>
        <node name="If" />
        <node name="While" />
        <node name="Do" />
        <node name="For" />
        <node name="Return" />
      </target>
    </nodeset>
        
    <nodeset name="Block">
      <target>
        <node name="Block" />
        <node name="VarDeclare" />
        <node name="Assign" />
        <node name="Funcall"/>
        <node name="If" />
        <node name="While" />
        <node name="Do" />
        <node name="For" />
        <node name="Return" />
      </target>
    </nodeset>
    
    <nodeset name="Expr">
      <target>
        <node name="Expr" />
        <node name="BinOp" />
        <node name="MonOp" />
        <node name="TypeCast" />
        <node name="Funcall" />
        <node name="Id" />
        <node name="Const" />
      </target>
    </nodeset>
    
    <nodeset name="BinOp">
      <target>
        <node name="ArithOp" />
        <node name="RelOp" />
        <node name="LogicOp" />
      </target>
    </nodeset>
    
    <nodeset name="ArithOp">
      <target>
        <node name="Add" />
        <node name="Substract" />
        <node name="Multiply" />
        <node name="Divide" />
        <node name="Modulo" />
      </target>
    </nodeset>
    
    <nodeset name="RelOp">
      <target>
        <node name="Equal" />
        <node name="NotEqual" />
        <node name="LessThan" />
        <node name="LessEqual" />
        <node name="GreaterThan" />
        <node name="GreaterEqual" />
      </target>
    </nodeset>
    
    <nodeset name="LogicOp">
      <target>
        <node name="AND" />
        <node name="OR" />
      </target>
    </nodeset>
    
    <nodeset name="MonOp">
      <target>
        <node name="Neg" />
        <node name="NOT" />
      </target>
    </nodeset>
    
    <nodeset name="Const">
      <target>
        <node name="IntConst" />
        <node name="FloatConst" />
        <node name="BoolConst" />
      </target>
    </nodeset>
    
    <nodeset name="BoolConst">
      <target>
        <node name="true" />
        <node name="false" />
      </target>

    </nodeset>
  </nodesets>

<!--
  =========================================================================
-->
  <syntaxtree>

<!--
 Node Program:
-->
     <node name="Program">
      <description>represents (sequence of) statements</description>
      <sons>
        <son name="Declaration">
        <description>first statement in sequence</description>
          <targets>
            <target mandatory="yes">
              <node name="Declarations" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node Declarations:
-->
     <node name="Declarations">
      <description>represents (sequence of) declaratios</description>
      <sons>
        <son name="Declaration">
        <description>first declaration in sequence</description>
          <targets>
            <target mandatory="yes">
              <set name="Declaration" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Next">
        <description>remaining declarations in sequence</description>
          <targets>
            <target mandatory="no">
              <node name="Declarations" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
    </node>

<!--
 Node Statements:
-->
     <node name="Statements">
      <description>represents (sequence of) statements</description>
      <sons>
        <son name="Statement">
        <description>first tatement in sequence</description>
          <targets>
            <target mandatory="yes">
              <set name="Statement" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Next">
        <description>remaining statements in sequence</description>
          <targets>
            <target mandatory="no">
              <node name="Statements" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node FunDec:
-->
    <node name="FunDec">
      <sons>
        <son name="FunHeader">
          <description></description>
          <targets>
            <target mandatory="yes">
              <node name="FunHeader" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
    </node>

<!--
 Node FunDef:
-->
    <node name="FunDef">
      <sons>
        <son name="FunHeader">
          <description></description>
          <targets>
            <target mandatory="yes">
              <node name="FunHeader" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
          <son name="FunBody">
          <description></description>
          <targets>
            <target mandatory="yes">
              <node name="FunBody" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Export">
            <type name="Bool">
                <targets>
	                <target mandatory="yes">
	                    <phases><all /></phases>
	                </target>
	            </targets>
            </type>
        </attribute>
      </attributes>
    </node>

<!--
 Node FunHeader:
-->
    <node name="FunHeader">
      <description>Function Header</description>
      <sons>
        <son name="RetType">
          <description></description>
          <targets>
            <target mandatory="yes">
              <node name="RetType" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Id">
          <description></description>
          <targets>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Params">
          <description></description>
          <targets>
            <target mandatory="No">
              <node name="Params" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
    </node>

<!--
 Node RetType:
-->
    <node name="RetType">
    </node>

<!--
 Node GlobalDec:
-->
    <node name="GlobalDec">
      <sons>
        <son name="Type">
          <description></description>
          <targets>
            <target mandatory="yes">
              <node name="Type" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Id">
          <description></description>
          <targets>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node GlobalDef:
-->
    <node name="GlobalDef">
      <sons>
        <son name="Type">
          <description></description>
          <targets>
            <target mandatory="yes">
              <node name="Type" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Id">
          <description></description>
          <targets>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Expr">
          <description></description>
          <targets>
            <target mandatory="no">
              <node name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Export">
            <type name="Bool">
                <targets>
                    <target mandatory="yes">
                        <phases><all /></phases>
                    </target>
                </targets>
            </type>
        </attribute>
      </attributes>
    </node>

<!--
 Node Type:
-->
    <node name="Type">
    </node>
    
<!--
 Node BasicType:
-->
    <node name="BasicType">
    </node>
    
    
<!--
 Node Params:
-->
     <node name="Params">
      <description>represents (sequence of) params</description>
      <sons>
        <son name="Param">
        <description>first param in sequence</description>
          <targets>
            <target mandatory="yes">
              <node name="Param" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Next">
        <description>remaining params in sequence</description>
          <targets>
            <target mandatory="no">
              <node name="Params" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node Param:
-->
     <node name="Param">
      <description>represents (sequence of) statements</description>
      <sons>
        <son name="Type">
        <description></description>
          <targets>
            <target mandatory="yes">
              <set name="Type" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Id">
        <description></description>
          <targets>
            <target mandatory="Yes">
              <node name="Id" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node FunBody:
-->
     <node name="FunBody">
      <description></description>
      <sons>
        <son name="VarDecs">
        <description></description>
          <targets>
            <target mandatory="no">
              <node name="VarDecs" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Statements">
        <description></description>
          <targets>
            <target mandatory="no">
              <node name="Statements" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node VarDecs:
-->
     <node name="VarDecs">
      <description>represents (sequence of) VarDecs</description>
      <sons>
        <son name="VarDec">
        <description>first VarDec in sequence</description>
          <targets>
            <target mandatory="yes">
              <set name="VarDec" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Next">
        <description>remaining VarDecs in sequence</description>
          <targets>
            <target mandatory="no">
              <node name="VarDecs" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node VarDec:
-->
     <node name="VarDec">
      <description></description>
      <sons>
        <son name="Type">
        <description></description>
          <targets>
            <target mandatory="Yes">
              <set name="Type" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Id">
        <description></description>
          <targets>
            <target mandatory="yes">
              <node name="Id" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node Statement:
-->
    <node name="Statement">
    </node>
    
<!--
  Node FunCall: 
 -->
    <node name="Funcall" >
      <sons>
        <son name="ID">
          <description>the name of the method to be called</description>
          <targets>
            <target mandatory="yes">
              <node name="Id" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Params">
          <description>the parameters for the function call</description>
          <targets>
            <target mandatory="No">
              <node name="Expressions" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
    </node>

<!--
  Node Typecast: 
 -->
    <node name="Typecast" >
    </node>

<!--
  Node Const: 
 -->
    <node name="Const" >
    </node>

<!--
 Node Block:
-->
    <node name="Block">
      <description>represents (sequence of) statements</description>
      <sons>
        <son name="Statement">
        <description>first statement in sequence</description>
          <targets>
            <target mandatory="no">
              <set name="Statement" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Next">
        <description>remaining statements in sequence</description>
          <targets>
            <target mandatory="no">
              <node name="Block" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node Assign:
-->
     <node name="Assign">
      <description>represents assignment statement</description>
      <sons>
        <son name="Let">
        <description>left hand side variable; can be missing to represent procedure calls</description>
          <targets>
            <target mandatory="no">
              <set name="LeftAssign" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Expr">
        <description>right hand side expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node If:
-->
     <node name="If">
      <description>represents if-else statement</description>
      <sons>
        <son name="Condition">
        <description>represents the condition</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="IfBlock">
        <description>to be excuted if the condition is true</description>
          <targets>
            <target mandatory="yes">
              <set name="Block" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="ElseBlock">
        <description>right hand side expression</description>
          <targets>
            <target mandatory="no">
              <set name="Block" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node While:
-->
     <node name="While">
      <description>represents the while statement</description>
      <sons>
        <son name="Condition">
        <description>represents the condition</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Block">
        <description>to be excuted while the condition is true</description>
          <targets>
            <target mandatory="yes">
              <set name="Block" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node Do:
-->
     <node name="Do">
      <description>represents the do-while statement</description>
      <sons>
        <son name="Condition">
        <description>represents the condition</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Block">
        <description>to be excuted until the condition becomes false</description>
          <targets>
            <target mandatory="yes">
              <set name="Block" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node For:
-->
     <node name="For">
      <description>represents the for statement</description>
      <sons>
        <son name="ID">
          <description>the name of the counter variable</description>
          <targets>
            <target mandatory="yes">
              <node name="Id" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Start">
          <description>represents the start value for the for-loop</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Finish">
          <description>represents the finish value (exluded) for the for-loop</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Step">
          <description>represents the step size for the for-loop</description>
          <targets>
            <target mandatory="no">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Block">
          <description>to be excuted until the condition becomes false</description>
          <targets>
            <target mandatory="yes">
              <set name="Block" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
    </node>

<!--
 Node Return:
-->  
    <node name="Return">
      <description>represents return statement</description>
      <sons>
        <son name="Expression">
        <description>represents the return expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node Expressions:
-->
     <node name="Expressions">
      <description>represents (sequence of) expressions</description>
      <sons>
        <son name="Expr">
        <description>first expr in sequence</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Next">
        <description>remaining expressions in sequence</description>
          <targets>
            <target mandatory="no">
              <node name="Expressions" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
  Node Expr:
-->
	<node name="Expr">
	</node>
	
<!--
 Node BinOp:
-->
    <node name="BinOp">
      <description>represents binary operator application</description>
      <sons>
        <son name="Left">
        <description>left operand expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Right">
        <description>right operand expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <description>operator type</description>
        <attribute name="Op">
          <type name="BinOp">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node UnOp:
-->
    <node name="UnOp">
      <description>represents unary operator application</description>
      <sons>
        <son name="Right">
        <description>right operand expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <description>operator type</description>
        <attribute name="Op">
          <type name="UnOp">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node VarDeclares:
-->
     <node name="VarDeclares">
      <description>represents (sequence of) variable declarations</description>
      <sons>
        <son name="VarDeclare">
        <description>first statement in sequence</description>
          <targets>
            <target mandatory="yes">
              <node name="VarDeclare" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Next">
        <description>remaining variable declarations in sequence</description>
          <targets>
            <target mandatory="no">
              <node name="VarDeclares" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node VarDeclare:
-->
    <node name="VarDeclare">
      <description>represents a variable declaration</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Name">
        <description>Identifier in character string representation</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
               </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Type">
          <type name="Type">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Decl">
        <description>Link to symbol table entry</description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="SymbolTableEntry" />
                <phases>
                  <all />
                </phases>
          </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node Id:
-->
    <node name="Id">
      <description>represents variable (identifier) in expression position</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Name">
        <description>Identifier in character string representation</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
               </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Decl">
        <description>Link to symbol table entry</description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="SymbolTableEntry" />
                <phases>
                  <all />
                </phases>
          </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

<!--
 Node Void:
-->
    <node name="Void">
      <description>Represents void return type</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Value">
          <type name="Void">
            <targets>
              <target mandatory="yes">
                 <phases>
                  <all />
                </phases>
             </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
    
<!--
 Node Int:
-->
   <node name="Int">
      <description>represents integer constant</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Value">
          <type name="Int">
            <targets>
              <target mandatory="yes">
                 <phases>
                  <all />
                </phases>
             </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node Float:
-->
    <node name="Float">
      <description>represents floating point constant</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Value">
          <type name="Float">
            <targets>
              <target mandatory="yes">
              </target>
                 <phases>
                  <all />
                </phases>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node Bool:
-->
    <node name="Bool">
      <description>represents Boolean constant (true/false)</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Value">
          <type name="Bool">
            <targets>
              <target mandatory="yes">
                 <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
    
<!--
 Node SymbolTableEntry:
-->
    <node name="SymbolTableEntry">
      <description>represents symbol table entry</description>
      <sons>
      </sons>
      <attributes>
      </attributes>
    </node>

<!--
 Node Error:
-->
    <node name="Error">
      <description>represents internal Error representation constructor</description>
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no" >
              <node name="Error" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="message">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
               </target>
            </targets>
          </type>
        </attribute>
        <attribute name="anyphase">
          <type name="CompilerPhase">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
               </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>

  </syntaxtree>

</definition>
  
