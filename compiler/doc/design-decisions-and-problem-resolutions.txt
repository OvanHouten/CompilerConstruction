=== SHIFT/REDUCE PROBLEM ===
After adding some rules to the civic.y file it turned out that we had some shift/reduce errors.

Here are two actual lines from the Bison verbose output

   11 unexpr: unop expr .
   12 binexpr: expr . binop expr
   
The shift/reduce errors where caused by the following rule

expr: unexpr
    | binexpr
    ;
    
The two mentioned rules 'unexpr' and 'binexpr' are the names of a rule for unary expressions and for binary expressions repectivly.

This was fixed by combining the two rules into a single slightly more verbose rule, see below for a small portion of the actual solution.

expr: BRACKET_L expr BRACKET_R { $$ = $2; }
    | NOT expr          { $$ = TBmakeUnop( UO_not, $2); }
    | MINUS expr        { $$ = TBmakeUnop( UO_neg, $2); }
    | expr MINUS expr   { $$ = TBmakeBinop( BO_sub, $1, $3); }
    | expr PLUS expr    { $$ = TBmakeBinop( BO_add, $1, $3); }
    | expr STAR expr    { $$ = TBmakeBinop( BO_mul, $1, $3); }

Combined with left and right accosiativity rules for the operators it works as expected.


=== DO-WHILE vs WHILE ===
Currently we have two different AST nodes for the 'while' and the 'do-while' loop. These can easily be combined into a single 'while' node with an extra attribute indicating pre or post condition check in order to distinguish the two.

=== FOR loop vs WHILE loops ===
We can try to combine all the loops into a single AST node. For now we have not implemented this. Mainly because the differences between a for loop and the (do-)while loops.

=== CLEANER GRAMMER ===
We have rebuild the grammar file from scratch. Our grammar was very verbose. After rebuilding it is much move concise and clean. 

=== DANGLING ELSE PROBLEM ===
Introduced a 'bogus' token THEN
%nonassoc THEN
%nonassoc ELSE
And added '%prec THEN' to our grammar rule that handles the if-only case.

=== GIT BRANCHES ===
We have four branches
- master: for the core development
- LocalFunction: for local function related development
- Array: for single and multi dimensional arrays (we opted for developing multi dimensional arrays, it can always be downgraded to single dimensional array if we run out of time)
- Combined: an integration branch for integration of the other three branches (and whish should contain our compiler at the and of the course) 

=== TEST SUITE ===
After integrating the provided test suite we found some bugs in our grammar, for example the dangling-else problem. Within each branch the appropriate tests have been added.
Before every commit we should doe a 'make clean && make check' to ensure we only commit we behaving code.

=== HANDLING FORWARD FUNCTION DECLARATIONS ===
This is handled during the traversal. Function names are registered when before the the next (local)defs node is being travered. Only when the last function name has been registered the functionbody is traversed.

=== SYMBOL TABLE IMPLEMENTATION ===
In preparation for the implementation the ID node in the AST has been assigned a new meaning. It is basically a node that defines a variable. All the other nodes that had a ID node for defining their name have been extended with a 'name' attribute. This change, as a side effect, makes the treversal in later phases less complicated. Until now we had almost no way of knowing if the ID node was a actual variabel node or was the name of a function. After this change each ID node has a single purpose.
Every FunDef node and the Program node have a dedicated SymbolTable node. Each SymbolTable has entries for every variable and function that is used within the scope of the function. Each STE holds a reference to the declaring node. So the STE for a VarDef has its attribute DECL pointing to the VarDef. Later on a ID STE will have a reference to that same VarDef. The same applies for FunDef and FunCall nodes. For FunDef the STE DECL references the FunDef node. The FunDef node contains all the information that is characteristic for the function.

VarDef <- STE <- ID
   +-------^

FunDef <- STE <- FunDef
   +-------^

FunDef <- STE <- FunCall
   +-------^

The SymbolTable and the SymbolTableEntries has been extended with extra information. SymbolTableEntries have a type attribute. Currrently we have VarDef, VarUsage, FunDef as type.

=== COMBINING VARDEF, GLOBALDEC, GLOBALDEF, PARAM NODES ===
What seemed like a good decision for the FUNDEF and FUNDEC nodes also applies to all forms of variabel declarations, wheter it be global, local or parameter declarations. So at first we switched to using a single VARDEF node that is capable of handling all the variation.

=== TRANSFORM FOR-LOOP VARIABLE ===
When a redefinition is found the old STE is temporary renamed so that when looking for the STE the new definition is found. Once the for-loop has been checked the original name is restored and the new shadowed/redefined variable is given a new unique name.

=== TYPE CHECKING ===
In preparation for the type-checking a couple of changes was made to the ast.xml in order to make the type checking easier. The separate binary operator nodes (LogicOp, ArithOp and RelOp) have been replaced by a single binary operator node (BinOp).

=== TERNARY OPERATOR ===
We have added a Ternary operator node to the AST that is being used for the short circuit boolean evaluation and typecasts to and from boolean.

=== FOR-LOOP 2 WHILE-LOOP ===
All for-loops are transformed into while loops. As part of this transformation the step- and finish-expressions are evaluated only once. In order to garantee this new local variabels have been introduced. These variables are being used during de condition check and the calculation of the next loop variable value (e.g. the '+ step' calculation.)

=== OPTIMIZATIONS ===
We have a compiler phase that is handles optimizations. The compiler performs the optimizations at most 10 times (currenlty hardcoded) or if no optimization was triggered.
These are the optimizations the compiler supports:
* Constants that are being used by a unary operator are replaced by constants with the 'deduced' value.
* Unary operators that are being used on constant values are replaced with the 'deduced' value.
* Binary operators action on two constants are reduced to the deduced value.
* Ternary operation are reduced to the remaining part when the condition is a boolean constant.
* Incrementing and decrementing integer variables with constants are replaced with a compounr += or -= operation.

=== GENERATE BYTE CODE ===
During the generation of the byte code (assemly) the most efficient opcode is used. This behaviour can not be disabled.

=== UNIQUE LABEL GENERATION ===
When generating labels for jump instructions needed by if-else and loop statements the labels have a fixed part and a dynamic part. For the dynamic part we use a counter that is incremented each time a statement is used. This ensures that the label are unique throughout each module.
